
services:
  # Servicio de base de datos para pruebas
  test_db:
    image: postgres:16-alpine # Imagen de PostgreSQL ligera
    environment:
      # Variables de entorno para la configuración de la base de datos de pruebas
      POSTGRES_DB: ${POSTGRES_DB_TEST:-app_test} # Nombre de la DB, usa default si no está en .env
      POSTGRES_USER: ${POSTGRES_USER_TEST:-testuser} # Usuario de la DB
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_TEST:-testpassword} # Contraseña de la DB
    ports:
      - "5433:5432" # Mapea el puerto 5432 del contenedor al 5433 del host para evitar conflictos
    volumes:
      - pgdata_test:/var/lib/postgresql/data # Volumen para persistencia de datos de la DB de pruebas

  # Servicio de base de datos para desarrollo principal
  db:
    image: postgres:16-alpine
    environment:
      # Variables de entorno para la configuración de la base de datos de desarrollo
      # Se leerán de un archivo .env en el mismo nivel que docker-compose.yml
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Mapea el puerto 5432 del contenedor al 5432 del host
    volumes:
      - pgdata:/var/lib/postgresql/data # Volumen para persistencia de datos de la DB de desarrollo

  # Servicio de la aplicación FastAPI
  app:
    build: . # Docker construirá la imagen desde el Dockerfile en el directorio actual
    ports:
      - "8000:8000" # Mapea el puerto 8000 del contenedor al puerto 8000 del host
    environment:
      # Pasa las variables de entorno de la base de datos a la aplicación
      # El host 'db' se refiere al nombre del servicio de la base de datos en Docker Compose
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # Otras variables de entorno que tu aplicación necesite (ej. para JWT, logging)
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      LOG_LEVEL: ${LOG_LEVEL}
      DEBUG: ${DEBUG}
      DB_ECHO: ${DB_ECHO}
      DB_POOL_SIZE: ${DB_POOL_SIZE}
      DB_MAX_OVERFLOW: ${DB_MAX_OVERFLOW}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_USE_TLS: ${SMTP_USE_TLS}
    depends_on:
      - db # Asegura que el servicio 'db' se inicie antes que 'app'
    volumes:
      # Monta el código fuente local en el contenedor para desarrollo.
      # Esto permite que los cambios en tu código se reflejen sin reconstruir la imagen.
      - .:/app
    # Sobrescribe el CMD del Dockerfile para habilitar el hot-reloading en desarrollo
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Definición de volúmenes para persistencia de datos de PostgreSQL
volumes:
  pgdata:
  pgdata_test: