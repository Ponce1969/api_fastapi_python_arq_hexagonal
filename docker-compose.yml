
services:
  # Servicio de Redis para rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes  # Habilita persistencia AOF
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nota: Las pruebas utilizan SQLite en memoria configurado en tests/conftest.py
  # No se requiere un servicio de base de datos dedicado para pruebas

  # Servicio de base de datos para desarrollo principal
  db:
    image: postgres:16-alpine
    environment:
      # Variables de entorno para la configuración de la base de datos de desarrollo
      # Se leerán de un archivo .env en el mismo nivel que docker-compose.yml
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Mapea el puerto 5432 del contenedor al 5432 del host
    volumes:
      - pgdata:/var/lib/postgresql/data # Volumen para persistencia de datos de la DB de desarrollo

  # Servicio de la aplicación FastAPI
  fastapi:
    build: . # Docker construirá la imagen desde el Dockerfile en el directorio actual
    ports:
      - "8000:8000" # Mapea el puerto 8000 del contenedor al puerto 8000 del host
    environment:
      # Pasa las variables de entorno de la base de datos a la aplicación
      # El host 'db' se refiere al nombre del servicio de la base de datos en Docker Compose
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # Otras variables de entorno que tu aplicación necesite (ej. para JWT, logging)
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      LOG_LEVEL: ${LOG_LEVEL}
      DEBUG: ${DEBUG}
      DB_ECHO: ${DB_ECHO}
      DB_POOL_SIZE: ${DB_POOL_SIZE}
      DB_MAX_OVERFLOW: ${DB_MAX_OVERFLOW}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_USE_TLS: ${SMTP_USE_TLS}
    depends_on:
      - db # Asegura que el servicio 'db' se inicie antes que 'app'
    volumes:
      # Monta el código fuente local en el contenedor para desarrollo.
      # Esto permite que los cambios en tu código se reflejen sin reconstruir la imagen.
      - .:/app
    # Sobrescribe el CMD del Dockerfile para habilitar el hot-reloading en desarrollo
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Definición de volúmenes para persistencia de datos
volumes:
  pgdata:
  redis_data: